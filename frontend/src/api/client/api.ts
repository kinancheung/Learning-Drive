/* tslint:disable */
/* eslint-disable */
/**
 * Learning drive
 * Learning drive application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AllCategories
 */
export interface AllCategories {
    /**
     * 
     * @type {Array<string>}
     * @memberof AllCategories
     */
    'categories': Array<string>;
}
/**
 * 
 * @export
 * @interface ChildComments
 */
export interface ChildComments {
    /**
     * 
     * @type {Array<Post & GrandchildComments>}
     * @memberof ChildComments
     */
    'comments': Array<Post & GrandchildComments>;
}
/**
 * 
 * @export
 * @interface CommentCount
 */
export interface CommentCount {
    /**
     * The number of comments on this post
     * @type {number}
     * @memberof CommentCount
     */
    'commentCount': number;
}
/**
 * 
 * @export
 * @interface CreateCategory
 */
export interface CreateCategory {
    /**
     * A category under which a post can be categorized
     * @type {string}
     * @memberof CreateCategory
     */
    'category': string;
}
/**
 * 
 * @export
 * @interface CreatePost
 */
export interface CreatePost {
    /**
     * The list of categories to which the post belongs
     * @type {Array<string>}
     * @memberof CreatePost
     */
    'categories': Array<string>;
    /**
     * The string body of the post, as written by the user
     * @type {string}
     * @memberof CreatePost
     */
    'content': string;
    /**
     * The resource attached to the post by the user. This is an optional field
     * @type {string}
     * @memberof CreatePost
     */
    'resource'?: string;
    /**
     * The id of the parent post (i.e. the post which this post is a comment of). Exclude this field if this post is a top-level post
     * @type {number}
     * @memberof CreatePost
     */
    'parentId'?: number;
}
/**
 * 
 * @export
 * @interface FollowUser
 */
export interface FollowUser {
    /**
     * Whether the user does or does not follow a different user
     * @type {boolean}
     * @memberof FollowUser
     */
    'following': boolean;
}
/**
 * 
 * @export
 * @interface GetPostQuery
 */
export interface GetPostQuery {
    /**
     * Return only posts containing this substring in their content
     * @type {string}
     * @memberof GetPostQuery
     */
    'searchQuery'?: string;
    /**
     * Return only posts which belong to all categories specified
     * @type {Array<string>}
     * @memberof GetPostQuery
     */
    'searchCategories'?: Array<string>;
    /**
     * Return only posts which were posted by this user
     * @type {string}
     * @memberof GetPostQuery
     */
    'userIdQuery'?: string;
    /**
     * When true, return only posts which were posted by users which the current user follows. Overrides the `userIdQuery` field
     * @type {boolean}
     * @memberof GetPostQuery
     */
    'followed'?: boolean;
    /**
     * Used for pagination; must be used in conjunction with the `pageSize` field. Represents the page number the request is for, given the page size specified by the `pageSize` field. 0 indexed
     * @type {number}
     * @memberof GetPostQuery
     */
    'offset'?: number;
    /**
     * Used for pagination; must be used in conjunction with the `offset` field. Represents the number of items which should be included per page. Multiple categories should be separated by commas.
     * @type {number}
     * @memberof GetPostQuery
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface GrandchildComments
 */
export interface GrandchildComments {
    /**
     * 
     * @type {Array<Post>}
     * @memberof GrandchildComments
     */
    'comments': Array<Post>;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * The new category after formatting by the backend (e.g. ensuring reasonable usage of whitespace)
     * @type {string}
     * @memberof InlineResponse201
     */
    'category': string;
}
/**
 * Schema which represents the JSON returned for errors and other conditions which expect status updates.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * The status message.
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * The unique identifier of the post
     * @type {number}
     * @memberof Post
     */
    '_id': number;
    /**
     * The id of the parent post, if it exists
     * @type {number}
     * @memberof Post
     */
    'parentId'?: number;
    /**
     * The user handle of the parent post, if one exists
     * @type {string}
     * @memberof Post
     */
    'parentHandle'?: string;
    /**
     * 
     * @type {User}
     * @memberof Post
     */
    'user': User;
    /**
     * The time at which the post was made, as milliseconds past the unix epoch
     * @type {number}
     * @memberof Post
     */
    'timestampCreated': number;
    /**
     * The time at which the post was most recently edited, as milliseconds past the unix epoch
     * @type {number}
     * @memberof Post
     */
    'timestampModified': number;
    /**
     * The list of categories to which the post belongs
     * @type {Array<string>}
     * @memberof Post
     */
    'categories': Array<string>;
    /**
     * The string body of the post, as written by the user
     * @type {string}
     * @memberof Post
     */
    'content': string;
    /**
     * 
     * @type {PostResource}
     * @memberof Post
     */
    'resource'?: PostResource;
    /**
     * 
     * @type {PostReactions}
     * @memberof Post
     */
    'reactions': PostReactions;
}
/**
 * The various types of reactions which have been made to this post. Currently, only likes are supported
 * @export
 * @interface PostReactions
 */
export interface PostReactions {
    /**
     * The number of times which people have liked a post
     * @type {number}
     * @memberof PostReactions
     */
    'likes': number;
    /**
     * Whether the current user has liked the post or not
     * @type {boolean}
     * @memberof PostReactions
     */
    'isPersonallyLiked': boolean;
    /**
     * The number of comments on this post
     * @type {number}
     * @memberof PostReactions
     */
    'commentCount': number;
}
/**
 * 
 * @export
 * @interface PostResource
 */
export interface PostResource {
    /**
     * The resource attached to the post by the user. This is an optional field
     * @type {string}
     * @memberof PostResource
     */
    'link': string;
    /**
     * 
     * @type {PostResourceOpenGraph}
     * @memberof PostResource
     */
    'openGraph'?: PostResourceOpenGraph;
}
/**
 * 
 * @export
 * @interface PostResourceOpenGraph
 */
export interface PostResourceOpenGraph {
    /**
     * The name of the website
     * @type {string}
     * @memberof PostResourceOpenGraph
     */
    'title'?: string;
    /**
     * The url which the request was sent to
     * @type {string}
     * @memberof PostResourceOpenGraph
     */
    'url'?: string;
    /**
     * The description of the website
     * @type {string}
     * @memberof PostResourceOpenGraph
     */
    'description'?: string;
    /**
     * The URL of the open graph image
     * @type {string}
     * @memberof PostResourceOpenGraph
     */
    'imageUrl'?: string;
}
/**
 * 
 * @export
 * @interface PostWithComments
 */
export interface PostWithComments {
    /**
     * The unique identifier of the post
     * @type {number}
     * @memberof PostWithComments
     */
    '_id': number;
    /**
     * The id of the parent post, if it exists
     * @type {number}
     * @memberof PostWithComments
     */
    'parentId'?: number;
    /**
     * The user handle of the parent post, if one exists
     * @type {string}
     * @memberof PostWithComments
     */
    'parentHandle'?: string;
    /**
     * 
     * @type {User}
     * @memberof PostWithComments
     */
    'user': User;
    /**
     * The time at which the post was made, as milliseconds past the unix epoch
     * @type {number}
     * @memberof PostWithComments
     */
    'timestampCreated': number;
    /**
     * The time at which the post was most recently edited, as milliseconds past the unix epoch
     * @type {number}
     * @memberof PostWithComments
     */
    'timestampModified': number;
    /**
     * The list of categories to which the post belongs
     * @type {Array<string>}
     * @memberof PostWithComments
     */
    'categories': Array<string>;
    /**
     * The string body of the post, as written by the user
     * @type {string}
     * @memberof PostWithComments
     */
    'content': string;
    /**
     * 
     * @type {PostResource}
     * @memberof PostWithComments
     */
    'resource'?: PostResource;
    /**
     * 
     * @type {PostReactions}
     * @memberof PostWithComments
     */
    'reactions': PostReactions;
    /**
     * 
     * @type {Array<Post & GrandchildComments>}
     * @memberof PostWithComments
     */
    'comments': Array<Post & GrandchildComments>;
}
/**
 * 
 * @export
 * @interface Posts
 */
export interface Posts {
    /**
     * 
     * @type {Array<Post>}
     * @memberof Posts
     */
    'posts': Array<Post>;
}
/**
 * 
 * @export
 * @interface ReactToPost
 */
export interface ReactToPost {
    /**
     * Whether the user does or does not like the post
     * @type {boolean}
     * @memberof ReactToPost
     */
    'liked': boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * The unique identifier of the user
     * @type {string}
     * @memberof User
     */
    '_id': string;
    /**
     * The url of the profile picture of the user
     * @type {string}
     * @memberof User
     */
    'imageUrl'?: string;
    /**
     * The real-life name of the user
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * The unique handle of the user used to directly add other users, generated by the backend
     * @type {string}
     * @memberof User
     */
    'handle': string;
}
/**
 * 
 * @export
 * @interface UserFullProfile
 */
export interface UserFullProfile {
    /**
     * 
     * @type {User}
     * @memberof UserFullProfile
     */
    'user': User;
    /**
     * The list of all the users who follow the user in question
     * @type {Array<User>}
     * @memberof UserFullProfile
     */
    'followers': Array<User>;
    /**
     * The number of users who follow the user in question
     * @type {number}
     * @memberof UserFullProfile
     */
    'followerCount': number;
    /**
     * The list of all the users followed by the user in question
     * @type {Array<User>}
     * @memberof UserFullProfile
     */
    'followed': Array<User>;
    /**
     * The number of users followed by the user in question
     * @type {number}
     * @memberof UserFullProfile
     */
    'followedCount': number;
    /**
     * The number of days in a row which the user has posted something
     * @type {number}
     * @memberof UserFullProfile
     */
    'streak': number;
    /**
     * A heatmap showing the daily posts of the user for the past month. Array is always of length 30
     * @type {Array<number>}
     * @memberof UserFullProfile
     */
    'heatmap': Array<number>;
}

/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a category
         * @summary Create a category
         * @param {CreateCategory} createCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (createCategory: CreateCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategory' is not null or undefined
            assertParamExists('createCategory', 'createCategory', createCategory)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all possible categories a post can be categorized under
         * @summary Get categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a category
         * @summary Create a category
         * @param {CreateCategory} createCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(createCategory: CreateCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(createCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all possible categories a post can be categorized under
         * @summary Get categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllCategories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Create a category
         * @summary Create a category
         * @param {CreateCategory} createCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(createCategory: CreateCategory, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.createCategory(createCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all possible categories a post can be categorized under
         * @summary Get categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any): AxiosPromise<AllCategories> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * Create a category
     * @summary Create a category
     * @param {CreateCategory} createCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public createCategory(createCategory: CreateCategory, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).createCategory(createCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all possible categories a post can be categorized under
     * @summary Get categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategories(options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a post
         * @summary Create a post
         * @param {CreatePost} createPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (createPost: CreatePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPost' is not null or undefined
            assertParamExists('createPost', 'createPost', createPost)
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete one of your own posts
         * @summary Delete a post.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePostById', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information about a post.
         * @summary Get a post.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPostById', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get posts for the various feeds. Request body fields allow for search and control of pagination.
         * @summary Get posts
         * @param {GetPostQuery} getPostQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (getPostQuery: GetPostQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getPostQuery' is not null or undefined
            assertParamExists('getPosts', 'getPostQuery', getPostQuery)
            const localVarPath = `/getPosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPostQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or remove your reaction to a post (currently, whether you have liked the post or not)
         * @summary React to a post.
         * @param {string} id The id of the object in the path
         * @param {ReactToPost} reactToPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reactToPost: async (id: string, reactToPost: ReactToPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reactToPost', 'id', id)
            // verify required parameter 'reactToPost' is not null or undefined
            assertParamExists('reactToPost', 'reactToPost', reactToPost)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reactToPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the content of one of your own posts
         * @summary Edit a post.
         * @param {string} id The id of the object in the path
         * @param {CreatePost} createPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost: async (id: string, createPost: CreatePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePost', 'id', id)
            // verify required parameter 'createPost' is not null or undefined
            assertParamExists('updatePost', 'createPost', createPost)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a post
         * @summary Create a post
         * @param {CreatePost} createPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(createPost: CreatePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(createPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete one of your own posts
         * @summary Delete a post.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get detailed information about a post.
         * @summary Get a post.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostWithComments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get posts for the various feeds. Request body fields allow for search and control of pagination.
         * @summary Get posts
         * @param {GetPostQuery} getPostQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(getPostQuery: GetPostQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Posts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(getPostQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or remove your reaction to a post (currently, whether you have liked the post or not)
         * @summary React to a post.
         * @param {string} id The id of the object in the path
         * @param {ReactToPost} reactToPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reactToPost(id: string, reactToPost: ReactToPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reactToPost(id, reactToPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change the content of one of your own posts
         * @summary Edit a post.
         * @param {string} id The id of the object in the path
         * @param {CreatePost} createPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePost(id: string, createPost: CreatePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(id, createPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsApiFp(configuration)
    return {
        /**
         * Create a post
         * @summary Create a post
         * @param {CreatePost} createPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(createPost: CreatePost, options?: any): AxiosPromise<void> {
            return localVarFp.createPost(createPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete one of your own posts
         * @summary Delete a post.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePostById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information about a post.
         * @summary Get a post.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostById(id: string, options?: any): AxiosPromise<PostWithComments> {
            return localVarFp.getPostById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get posts for the various feeds. Request body fields allow for search and control of pagination.
         * @summary Get posts
         * @param {GetPostQuery} getPostQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(getPostQuery: GetPostQuery, options?: any): AxiosPromise<Posts> {
            return localVarFp.getPosts(getPostQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or remove your reaction to a post (currently, whether you have liked the post or not)
         * @summary React to a post.
         * @param {string} id The id of the object in the path
         * @param {ReactToPost} reactToPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reactToPost(id: string, reactToPost: ReactToPost, options?: any): AxiosPromise<void> {
            return localVarFp.reactToPost(id, reactToPost, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the content of one of your own posts
         * @summary Edit a post.
         * @param {string} id The id of the object in the path
         * @param {CreatePost} createPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(id: string, createPost: CreatePost, options?: any): AxiosPromise<void> {
            return localVarFp.updatePost(id, createPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * Create a post
     * @summary Create a post
     * @param {CreatePost} createPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public createPost(createPost: CreatePost, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).createPost(createPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete one of your own posts
     * @summary Delete a post.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public deletePostById(id: string, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).deletePostById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed information about a post.
     * @summary Get a post.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPostById(id: string, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getPostById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get posts for the various feeds. Request body fields allow for search and control of pagination.
     * @summary Get posts
     * @param {GetPostQuery} getPostQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPosts(getPostQuery: GetPostQuery, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getPosts(getPostQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or remove your reaction to a post (currently, whether you have liked the post or not)
     * @summary React to a post.
     * @param {string} id The id of the object in the path
     * @param {ReactToPost} reactToPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public reactToPost(id: string, reactToPost: ReactToPost, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).reactToPost(id, reactToPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the content of one of your own posts
     * @summary Edit a post.
     * @param {string} id The id of the object in the path
     * @param {CreatePost} createPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public updatePost(id: string, createPost: CreatePost, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).updatePost(id, createPost, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Follow or Unfollow a user.
         * @summary Follow a user.
         * @param {string} id The id of the object in the path
         * @param {FollowUser} followUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followUser: async (id: string, followUser: FollowUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('followUser', 'id', id)
            // verify required parameter 'followUser' is not null or undefined
            assertParamExists('followUser', 'followUser', followUser)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information about a user.
         * @summary Get a user.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a users id if they exist, given a user handle.
         * @summary Get a user\'s id.
         * @param {string} handle The handle of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdFromHandle: async (handle: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'handle' is not null or undefined
            assertParamExists('getUserIdFromHandle', 'handle', handle)
            const localVarPath = `/users/get-id/{handle}`
                .replace(`{${"handle"}}`, encodeURIComponent(String(handle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FirebaseAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Follow or Unfollow a user.
         * @summary Follow a user.
         * @param {string} id The id of the object in the path
         * @param {FollowUser} followUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followUser(id: string, followUser: FollowUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followUser(id, followUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get detailed information about a user.
         * @summary Get a user.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFullProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a users id if they exist, given a user handle.
         * @summary Get a user\'s id.
         * @param {string} handle The handle of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserIdFromHandle(handle: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserIdFromHandle(handle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Follow or Unfollow a user.
         * @summary Follow a user.
         * @param {string} id The id of the object in the path
         * @param {FollowUser} followUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followUser(id: string, followUser: FollowUser, options?: any): AxiosPromise<void> {
            return localVarFp.followUser(id, followUser, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information about a user.
         * @summary Get a user.
         * @param {string} id The id of the object in the path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: any): AxiosPromise<UserFullProfile> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a users id if they exist, given a user handle.
         * @summary Get a user\'s id.
         * @param {string} handle The handle of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdFromHandle(handle: string, options?: any): AxiosPromise<string> {
            return localVarFp.getUserIdFromHandle(handle, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Follow or Unfollow a user.
     * @summary Follow a user.
     * @param {string} id The id of the object in the path
     * @param {FollowUser} followUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public followUser(id: string, followUser: FollowUser, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).followUser(id, followUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed information about a user.
     * @summary Get a user.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserById(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a users id if they exist, given a user handle.
     * @summary Get a user\'s id.
     * @param {string} handle The handle of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserIdFromHandle(handle: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserIdFromHandle(handle, options).then((request) => request(this.axios, this.basePath));
    }
}


